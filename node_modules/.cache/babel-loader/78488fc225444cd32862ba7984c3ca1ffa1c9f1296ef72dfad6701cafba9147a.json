{"ast":null,"code":"import * as o from \"react\";\nconst a = t => {\n  if (!o.isValidElement(t)) throw Error(\"Expected a single React Element child, but got: \".concat(o.Children.toArray(t).map(e => typeof e == \"object\" && \"type\" in e && typeof e.type == \"string\" ? e.type : typeof e).join(\", \")));\n  return t;\n};\nexport { a as requireReactElement };","map":{"version":3,"names":["o","a","t","isValidElement","Error","concat","Children","toArray","map","e","type","join","requireReactElement"],"sources":["/Users/danielcross/bootcamp/mod-20/daniel-cross-portfolio/node_modules/@radix-ui/themes/src/helpers/require-react-element.ts"],"sourcesContent":["import * as React from 'react';\n\n/** A function that throws an error when a value isn't a valid React Element, otherwise returns the value */\nexport const requireReactElement = <T extends React.ReactNode>(children: T): T => {\n  const isReactElement = React.isValidElement(children);\n\n  if (!isReactElement) {\n    throw Error(\n      `Expected a single React Element child, but got: ${React.Children.toArray(children)\n        .map((child) =>\n          typeof child === 'object' && 'type' in child && typeof child.type === 'string'\n            ? child.type\n            : typeof child\n        )\n        .join(', ')}`\n    );\n  }\n\n  return children;\n};\n"],"mappings":"AAAA,YAAYA,CAAA,MAAW;AAGhB,MAAMC,CAAA,GAAkDC,CAAA,IAAmB;EAGhF,IAAI,CAFmBF,CAAA,CAAMG,cAAA,CAAeD,CAAQ,GAGlD,MAAME,KAAA,oDAAAC,MAAA,CAC+CL,CAAA,CAAMM,QAAA,CAASC,OAAA,CAAQL,CAAQ,EAC/EM,GAAA,CAAKC,CAAA,IACJ,OAAOA,CAAA,IAAU,YAAY,UAAUA,CAAA,IAAS,OAAOA,CAAA,CAAMC,IAAA,IAAS,WAClED,CAAA,CAAMC,IAAA,GACN,OAAOD,CACb,EACCE,IAAA,CAAK,IAAI,CAAC,CACf;EAGF,OAAOT,CACT;AAAA;AAAA,SAAAD,CAAA,IAAAW,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}